datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model PokemonBuild {
  id         Int      @id @default(autoincrement())
  name       String   // Pokemon name
  species    String?  // Pokemon species (same as name for now)
  gender     String?  // Pokemon gender (M, F, or U for unknown/genderless)
  level      Int      @default(50) // Pokemon level
  tier       String   // Tier (e.g., OU, UU, etc.)
  moves      String   // JSON string of moves array
  item       String?  // Held item
  nature     String?  // Pokemon nature
  ability    String?  // Pokemon ability
  // IVs (Individual Values) - 0-31 for each stat
  hpIV       Int      @default(31)
  attackIV   Int      @default(31)
  defenseIV  Int      @default(31)
  spAttackIV Int      @default(31)
  spDefenseIV Int     @default(31)
  speedIV    Int      @default(31)
  // EVs (Effort Values) - 0-252 for each stat, max 510 total
  hpEV       Int      @default(0)
  attackEV   Int      @default(0)
  defenseEV  Int      @default(0)
  spAttackEV Int      @default(0)
  spDefenseEV Int     @default(0)
  speedEV    Int      @default(0)
  // Metadata
  description String? // Optional description
  team_id    String? // Team ID for grouping Pokemon
  team_name  String? // Team name for display
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ShinyHunt {
  id            Int      @id @default(autoincrement())
  pokemonId     Int      // National Dex ID (1-649 for Gen 1-5)
  pokemonName   String   // Pokemon name
  method        String   // Hunting method: "Hordes 5x", "Hordes 3x", "Singles / Lures", "Safari", "Egg (including Alphas)", "Honey"
  startDate     DateTime @default(now())
  phaseCount    Int      @default(1) // Current phase number
  totalEncounters Int    @default(0) // Total encounters across all phases
  isCompleted   Boolean  @default(false)
  notes         String?  // User notes
  phasePokemon  String?  // JSON array of Pokemon encountered in each phase
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ShinyPortfolio {
  id            Int      @id @default(autoincrement())
  pokemonId     Int      // National Dex ID (1-649 for Gen 1-5)
  pokemonName   String   // Pokemon name
  method        String   // Method used to find this shiny
  dateFound     DateTime @default(now())
  nature        String?  // Pokemon nature
  encounterCount Int?    // Optional encounter count
  // IVs (Individual Values) - 0-31 for each stat
  hpIV          Int?     // Optional IV tracking
  attackIV      Int?
  defenseIV     Int?
  spAttackIV    Int?
  spDefenseIV   Int?
  speedIV       Int?
  notes         String?  // Optional notes
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model JournalEntry {
  id          Int      @id @default(autoincrement())
  title       String   // Entry title
  content     String   // Rich text content (HTML)
  plainText   String?  // Plain text version for searching
  tags        String?  // JSON array of tag names
  isPublic    Boolean  @default(false) // For future social features
  mediaUrls   String?  // JSON array of media file URLs
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("journal_entries")
}

model JournalTag {
  id          Int      @id @default(autoincrement())
  name        String   @unique // Tag name (e.g., "competitive", "shiny hunt")
  color       String?  // Optional color for the tag
  description String?  // Optional description
  useCount    Int      @default(0) // How many entries use this tag
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("journal_tags")
}

model JournalMedia {
  id          Int      @id @default(autoincrement())
  filename    String   // Original filename
  filePath    String   // Path to stored file
  fileType    String   // MIME type
  fileSize    Int      // File size in bytes
  entryId     Int?     // Optional - which entry this belongs to
  createdAt   DateTime @default(now())
  
  @@map("journal_media")
}
